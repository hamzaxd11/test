def report(true, pred):
    print(classification_report(true, pred))
    print(confusion_matrix(true, pred))
    print("Accuracy  ",accuracy_score(true, pred))
    print("Precision ",precision_score(true, pred))
    print("Recall    ",recall_score(true, pred))
    print("F1 score  ",f1_score(true, pred))
    print("AUC ROC   ", roc_auc_score(true, pred))




def model_selection(X,y, scoring,cv_n):

    np.random.seed(1)

    model_select_df = pd.DataFrame()
    
    model_select_df['Models'] = ['SVC Linear kernel       ',
                                    'SVC Polynomial kernel   ',
                                    'SVC RBF kernel          ',
                                    'Linear SVC              ',
                                    'Decision tree           ',
                                    'Logistic Regression     ',
                                    'KNN Classifier          ',
                                    'Naive Bayes             ',
                                    'Random Forest Classifier',
                                    'XGBoost                 ',
                                    'Gradient Boosting       ',
                                    'AdaBoost                ',
                                    'LightGBM                ',
                                    'ExtraTrees              ',
                                    'CatBoost                ']
    
    models = [svm.SVC(kernel = 'linear'),
            svm.SVC(kernel = 'poly'),
            svm.SVC(kernel = 'rbf'),
            svm.LinearSVC(),
            tree.DecisionTreeClassifier(),
            LogisticRegression(),
            KNeighborsClassifier(),
            GaussianNB(),
            RandomForestClassifier(),
            XGBClassifier(n_jobs=-1),
            GradientBoostingClassifier(),
            AdaBoostClassifier(),
            LGBMClassifier(n_jobs=-1),
            ExtraTreesClassifier(n_jobs=-1),
            CatBoostClassifier(thread_count=-1)]
        
    scores = []
    
    for i in models:
        x = cross_val_score(i, X, y, cv=cv_n, n_jobs=-1, scoring = scoring).mean()
        scores.append(x)

    model_select_df['Scores'] = scores

    
    return model_select_df








def report(true, pred):
    print('Mean Absolute Error:    ', metrics.mean_absolute_error(true, pred))  
    print('Mean Squared Error:     ', metrics.mean_squared_error(true, pred))  
    print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(true, pred)))
    print('R Squared:              ', r2_score(true, pred))




def model_selection(X,y, scoring,cv_n):

    np.random.seed(1)

    model_select_df = pd.DataFrame()
    
    model_select_df['Models'] = [   'Linear Regression',
                                    'Ridge',
                                    'Lasso',
                                    'Elastic Net',
                                    'SGD Regressor',
                                    'SVR Linear kernel       ',
                                    'SVR Polynomial kernel   ',
                                    'SVR RBF kernel          ',
                                    'Linear SVR              ',
                                    'Decision tree           ',
                                    'KNN Regressor           ',
                                    'Random Forest Regressor ',
                                    'XGBoost                 ',
                                    'Gradient Boosting       ',
                                    'AdaBoost                ',
                                    'LightGBM                ',
                                    'ExtraTrees              ',
                                    'CatBoost                ']
    
    models = [ LinearRegression(),
            Ridge(),
            Lasso(),
            ElasticNet(),
            SGDRegressor(),
            SVR(kernel = 'linear'),
            SVR(kernel = 'poly'),
            SVR(kernel = 'rbf'),
            LinearSVR(),
            DecisionTreeRegressor(),
            KNeighborsRegressor(),
            RandomForestRegressor(),
            XGBRegressor(n_jobs=-1),
            GradientBoostingRegressor(),
            AdaBoostRegressor(),
            LGBMRegressor(n_jobs=-1),
            ExtraTreesRegressor(n_jobs=-1),
            CatBoostRegressor(thread_count=-1)]
        
    scores = []
    
    for i in models:
        x = cross_val_score(i, X, y, cv=cv_n, n_jobs=-1, scoring = scoring).mean()*-1
        scores.append(x)

    model_select_df['Scores'] = scores

    
    return model_select_df





histgradientboosting